use Pfizer::FastQC::Config;
use Pfizer::FastQC::SampleGroup;
use Pfizer::FastQC::BCLDirectory;
use Pfizer::FastQC::BCL2FastqRun;
use Pfizer::FastQC::SampleFactory;
use Pfizer::FastQC::RawFastqFile;
use Pfizer::FastQC::ReadCleanRun;
use Pfizer::FastQC::CleanFastqFileFactory;
use Pfizer::FastQC::QCRep2Fastq;
use Pfizer::FastQC::QCReport;
use Wyeth::Util::Utils qw(protlog sendmail);
use File::Basename; 
use Data::Dumper;
use Carp;
use strict;

=head1 NAME

qc_report_from_fastq_dir.pl

=head1 SYNOPSIS

perl qc_report_from_fastq_dir.pl <source_directory>
    
=head1 DESCRIPTION

Given a source directory containing .fastq.gz files, run a FASTQC qc report.  Files are registered in
pipeline using same apparatus as is used for .fastq.gz files generated by the BCL2FASTQ pipeline.
Currently, source directory is hard-coded (see TODOs below)

=head1 AUTHOR

Andrew Hill, Pfizer.

=cut

my $target_fq_dir = shift;

sub usage {
    print "qc_report_from_fastq_dir.pl <target fastq directory name>\n";
}

unless (defined($target_fq_dir)) {
    usage();
    exit(-1);
}

my $do_readclean = 0;
my $username = 'andrew.hill@pfizer.com';
my $bcl_dir_name = 'jim_test';
my $num_reads = 2;
my $sg = new Pfizer::FastQC::SampleGroup();
$sg->set_userName($username);
$sg->set_do_readclean($do_readclean);
$sg->set_name($bcl_dir_name);
$sg->set_checksum($bcl_dir_name);
$sg->set_num_reads($num_reads);
# insert the SampleGroup
unless ($sg->insert) {
    confess "failed to insert Sample Group";
}
protlog($LOG_FH, "Sample group ID=" . $sg->id . " inserted");
my @snames = qw(A1 B2 C4);
my @samples = ();
foreach my $sn (@snames) {
    my $samp = new Pfizer::FastQC::Sample();
    $samp->set_sample_name($sn);
    $samp->set_sample_group_id($sg->id);
    if ($samp->insert) {
	protlog($LOG_FH, "inserted Sample ID = " . $samp->id . " for sample group ID = " . $sg->id);
    } else { 
	confess "failed to insert Sample";
    }
    push @samples, $samp;
}

#TODO: read the target directory specified in command line
# TODO: parse the sample names from fastq.gz files in that directory

my $root_dir = '/hpc/grid/scratch/tbi/fastqc/raw/JIM';
my %base_names = ( 
    A1 => 'FCC5FYHACXX-WHHUMcxwEBAARAAPEI-201',
    B2 => 'FCC5FYHACXX-WHHUMcxwEBAFRAAPEI-207',
    C4 => 'FCC5FYHACXX-WHHUMcxwEBALRAAPEI-213'
    );
my @raw_fastqs;
my @rcrs;
my @clean_fastqs;
foreach my $s (@samples) {
    my $rcr = new Pfizer::FastQC::ReadCleanRun();
    foreach my $read_num (1..$num_reads) {
	# my $path = join("/", $root_dir, sprintf("%s_%d.fq.gz", $base_names{$s->sample_name}, $read_num));
	my $rfq = new Pfizer::FastQC::RawFastqFile();
	$rfq->set_path($root_dir);
	$rfq->set_sample_id($s->id);
	$rfq->set_read_number($read_num);
	$rfq->set_name(sprintf("%s_%d.fastq.gz", $base_names{$s->sample_name}, $read_num));
	$rfq->set_status('PAS');
	if ($rfq->insert) {
	    protlog($LOG_FH, "inserted RFQ ID = " . $rfq->id . " for sample ID = " . $s->id);
	} else { 
	    confess "failed to insert RawFastqFile";
	}
	push @raw_fastqs, $rfq;
	if ($read_num == 1) {
	    $rcr->set_raw_fastq_file_1_id($rfq->id);
	} elsif ($read_num == 2) {
	    $rcr->set_raw_fastq_file_2_id($rfq->id);
	} else {
	    confess "unknown read_num $read_num";
	}

	my $cfq = new Pfizer::FastQC::CleanFastqFile();
	$cfq->set_raw_fastq_file_id($rfq->id);
	$cfq->set_readclean_run_id($rcr->id);
	$cfq->set_read_number($read_num);
	$cfq->set_name($rfq->name);
	$cfq->set_path($rfq->path);
	$cfq->set_status('PAS');
	$cfq->set_type('CLEAN');
	push @clean_fastqs, $cfq;
    }
    if ($rcr->insert) {
	protlog($LOG_FH, "inserted RCR ID = " . $rcr->id . " for sample ID = " . $s->id);
    } else { 
	confess "failed to insert ReadCleanRun";
    }
    push @rcrs, $rcr;
    foreach my $cfq (@clean_fastqs) {
	$cfq->set_readclean_run_id($rcr->id);
	if ($cfq->insert) {
	    protlog($LOG_FH, "inserted CFQ ID = " . $cfq->id . " for sample ID = " . $s->id);
	} else { 
	    confess "failed to insert ReadCleanRun";
	}
    }
}

my $qcr = new Pfizer::FastQC::QCReport();
$qcr->set_username($sg->userName);
$qcr->set_status('PEN');
$qcr->set_name(join("_", $sg->name, $sg->do_readclean));
$qcr->set_path(join("/", $Pfizer::FastQC::Config::QC_REPORT_ROOT_DIR, $qcr->name));
$qcr->set_fastqc_extract(1);
unless ($qcr->insert) {
    confess "failed to insert QCReport";
}
my @infastqs = @clean_fastqs;
foreach my $inf (@clean_fastqs) {
    my $q2f = new Pfizer::FastQC::QCRep2Fastq();
    $q2f->set_qc_report_id($qcr->id);
    $q2f->set_fastq_file_id($inf->id);
    $q2f->set_fastq_type('CLEAN');
    unless ($q2f->insert) {
	confess "failed to insert QCRep2Fastq";
    }	       	       
}
if ($qcr->run) {
    protlog($LOG_FH, "Succesfully completed QCReport ID = " . $qcr->id);
} else {
    confess "failed to run QCReport ID = " . $qcr->id;
}
    

